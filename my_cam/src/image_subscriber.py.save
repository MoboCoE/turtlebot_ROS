#!/usr/bin/python3

import rospy
import cv2
import torch
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image

model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)

def callback(image_msg):
    """This function is called to handle the subscribed messages

    Args:
        image_msg (Image): message type Image from sensor_msgs
    """
    try:
        cv_image = bridge.imgmsg_to_cv2(image_msg)
        cv_image_copy = cv_image.copy()
        height = frame.shape[0] #480
        width = frame.shape[1] #640
        center_w = width/2
        center_h = height/2
        degree_w = 53.5
        degree_h = 41.41
        degree_px = 53.5/width
        tensor_frame = model(cv_image, size=640)
        data_frame = tensor_frame.pandas().xyxy[0]
        indexes = data_frame.index
        for index in indexes:
           x1 = int(data_frame['xmin'][index])
           y1 = int(data_frame['ymin'][index])
           dist_center_obj_min = center_w - x1
           degree_center_obj_min = degree_px*dist_center_obj_min
           x2 = int(data_frame['xmax'][index])
           y2 = int(data_frame['ymax'][index])
           dist_center_obj_max = center_w - x2
           degree_center_obj_max = degree_px*dist_center_obj_max
           label = data_frame['name'][index]
           conf = data_frame['confidence'][index]
                   text = str(round(degree_center_obj_min, 2)) + ' ' + str(round(degree_center_obj_max, 2))
           cv2.rectangle(cv_image_copy, (x1,y1), (x2,y2), (255,255,0), 2)
           cv2.putText(cv_image_copy, text, (x1,y1-5), cv2.FONT_HERSHEY_PLAIN, 2, (255,255,0), 2)
    
        cv2.imshow("Detect", cv_image_copy)
        #cv2.imshow('ROS Image Subscriber', cv_image) 
        
        cv2.waitKey(10)
    except CvBridgeError as error:
        print(error)

if __name__=="__main__":
    bridge = CvBridge()
    rospy.init_node("image_subscriber", anonymous=True)
    print("Subscribe images from topic /image_raw ...")

    image_subcriber = rospy.Subscriber("image_raw", Image, callback)
    
    try:
        # spin() simply keeps python from exiting until this node is stopped
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down!")
